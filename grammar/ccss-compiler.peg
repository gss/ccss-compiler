{
  var grammar = (function() {
    var getInput = function() {
      return input;
    };

    var getLine = function() {
      return line();
    };

    var getColumn = function() {
      return column();
    };

    var Grammar = require('./grammar');
    return new Grammar(getInput, getLine, getColumn);
  })();
}

start
  = __ statements:(Statement*) __ { return grammar.start(); }

Statement
  = expression:LinearConstraint EOS __ { return grammar.statement().linearConstraint(expression); }
  / virtual:Virtual EOS __ { return grammar.statement().virtual(virtual); }
  / conditional:Conditional EOS __ { return grammar.statement().conditional(conditional); }
  / stay:Stay EOS __ { return grammar.statement().stay(stay); }
  / chain:Chain EOS __ { return grammar.statement().chain(chain); }
  / javaScript:ForEach EOS __ { return grammar.statement().forEach(javaScript); }


AndOrExpression
  = head:ConditionalExpression
    tail:(__ AndOrOp __ ConditionalExpression)* {
      return grammar.andOrExpression(head, tail);
    }

AndOrOp
  = ("AND" / "and" / "And" / "&&") { return grammar.andOrOperator().and(); }
  / ("OR"  / "or"  / "Or"  / "||") { return grammar.andOrOperator().or(); }

ConditionalExpression
  = head:AdditiveExpression
    tail:(__ CondOperator __ AdditiveExpression)* {
      return grammar.conditionalExpression(head, tail);
    }

CondOperator
  = "==" { return grammar.conditionalOperator().equal(); }
  / ("<=" / "=<") { return grammar.conditionalOperator().lte(); }
  / (">=" / "=>") { return grammar.conditionalOperator().gte(); }
  / "<"  { return grammar.conditionalOperator().lt(); }
  / ">"  { return grammar.conditionalOperator().gt(); }
  / "!="  { return grammar.conditionalOperator().notEqual(); }

LinearConstraint
  = head:ConstraintAdditiveExpression
    tail:(__ LinearConstraintOperator __ ConstraintAdditiveExpression)* __ strengthAndWeight:StrengthAndWeight? {
      return grammar.linearConstraint(head, tail, strengthAndWeight);
    }

LinearConstraintOperator
  = "==" { return grammar.linearConstraintOperator().equal() }
  / ("<=" / "=<") { return grammar.linearConstraintOperator().lte() }
  / (">=" / "=>") { return grammar.linearConstraintOperator().gte() }
  / "<"  { return grammar.linearConstraintOperator().lt()  }
  / ">"  { return grammar.linearConstraintOperator().gt()  }

ConstraintAdditiveExpression
  = head:ConstraintMultiplicativeExpression
    tail:(__ AdditiveOperator __ ConstraintMultiplicativeExpression)* {
      return grammar.constraintAdditiveExpression(head, tail);
    }

AdditiveExpression
  = head:MultiplicativeExpression
    tail:(__ AdditiveOperator __ MultiplicativeExpression)* {
      return grammar.additiveExpression(head, tail);
    }

AdditiveOperator
  = "+" { return grammar.additiveOperator().plus(); }
  / "-" { return grammar.additiveOperator().minus(); }

ConstraintMultiplicativeExpression
  = head:ConstraintPrimaryExpression
    tail:(__ MultiplicativeOperator __ ConstraintPrimaryExpression)* {
      return grammar.constraintMultiplicativeExpression(head, tail);
    }

MultiplicativeExpression
  = head:PrimaryExpression
    tail:(__ MultiplicativeOperator __ PrimaryExpression)* {
      return grammar.multiplicativeExpression(head, tail);
    }

MultiplicativeOperator
  = "*" { return grammar.multiplicativeOperator().multiply(); }
  / "/" { return grammar.multiplicativeOperator().divide(); }

ConstraintPrimaryExpression
  = Var
  / Literal
  / "(" __ expression:ConstraintAdditiveExpression __ ")" {
    return grammar.constraintPrimaryExpression().constraintAdditiveExpression(expression);
  }

PrimaryExpression
  = Var
  / Literal
  / "(" __ expression:AndOrExpression __ ")" {
    return grammar.primaryExpression().andOrExpression(expression);
  }

Var "variable"
  = selector:Selector? "[" variableNameCharacters:NameChars+ "]" {
      return grammar.variable(selector, variableNameCharacters);
    }

NameChars
  = [a-zA-Z0-9#.\-_$]

NameCharsWithSpace
  = NameChars / " "

Literal
  = value:(Real / Integer) { return grammar.literal(value); }

Integer
  = digits:[0-9]+ { return grammar.integer(digits); }

Real
  = digits:(Integer "." Integer) { return grammar.real(digits); }

SignedInteger
  = [-+]? [0-9]+

SourceCharacter
  = .

WhiteSpace "whitespace"
  = [\t\v\f \u00A0\uFEFF]

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator

EOS
  = __ ";"
  / _ LineTerminatorSequence
  / __ EOF

EOF
  = !.

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)* (LineTerminator / EOF)
_
  = (WhiteSpace / MultiLineCommentNoLineTerminator / SingleLineComment)*

__
  = (WhiteSpace / LineTerminatorSequence / Comment)*



// Query Selectors
// ===================================================

Selector "selector"
  = "#" nameCharacters:NameChars+ {
    return grammar.selector().id(nameCharacters);
  }
  / "::" selectorName:ReservedPseudos {
    return grammar.selector().reservedPseudoSelector(selectorName);
  }
  / '"' nameCharacters:[a-zA-Z0-9.\-_$=:+><~ ]+ '"' {
    return grammar.selector().virtual(nameCharacters);
  }
  / "." nameCharacters:NameChars+  {
    return grammar.selector().class(nameCharacters);
  }
  / nameCharacters:NameChars+  {
    return grammar.selector().tag(nameCharacters);
  }
  / "(" parts:QuerySelectorAllParts+ ")"  {
    return grammar.selector().all(parts);
  }

QuerySelectorAllParts
  = selectorCharacters:QuerySelectorChars+ {
    return grammar.querySelectorAllParts().withoutParens(selectorCharacters);
  }
  / "(" selectorCharacters:[^)]* ")" {
    return grammar.querySelectorAllParts().withParens(selectorCharacters);
  }

QuerySelectorChars
  = [a-zA-Z0-9#.\-_$=:+>'" \]\[]

ReservedPseudos
  = ("document" / "host" / "scope" / "parent")
  / ("window" / "viewport") { return grammar.reservedPseudoSelector().window(); }
  / ("this" / "") { return grammar.reservedPseudoSelector().this(); }



// Strength & Weight
// ===================================================

StrengthAndWeight
  = "!" strength:Strength weight:Weight?  {
    return grammar.strengthAndWeight().valid(strength, weight);
  }
  / "!" .? {
    return grammar.strengthAndWeight().invalid();
  }

Weight
  = weight:[0-9]+ { return grammar.weight(weight); }

Strength
  = ("require"  / "REQUIRE"  / "Require")  { return grammar.strength().require(); }
  / ("strong"   / "STRONG"   / "Strong")   { return grammar.strength().strong(); }
  / ("medium"   / "MEDIUM"   / "Medium")   { return grammar.strength().medium(); }
  / ("weak"     / "WEAK"     / "Weak")     { return grammar.strength().weak(); }
  / ("required" / "REQUIRED" / "Required") { return grammar.strength().required(); }


// Virtual
// ===================================================
// also see query selectors

Virtual
  = "@" ("-gss-virtual" / "virtual") __ names:VirtualName+ {
    return grammar.virtualElement(names);
  }

VirtualName
  = '"' nameCharacters:[^"]+ '"' __ {
    return grammar.virtualElementName(nameCharacters);
  }


// Stays
// ===================================================

Stay
  =  StayStart variables:StayVars+ {
      return grammar.stay(variables);
    }

StayVars
  = __ variable:Var __ ","?  { return grammar.stayVariable(variable); }

StayStart
  = ("@-gss-stay" / "@stay")



// Conditionals
// ===================================================

Conditional
  = "@cond" __ result:AndOrExpression __ { return grammar.conditional(result); }



// JS hooks
// ===================================================

ForEach
  = type:ForLooperType __ selector:Selector __ javaScript:JavaScript {
    return grammar.forEach(type, selector, javaScript)
  }

JavaScript
  = "```" characters:[^`]* "```" { return grammar.javaScript(characters); }

ForLooperType
  = ("@-gss-for-each" / "@for-each") { return grammar.forLoopType().forEach(); }
  / ("@-gss-for-all" / "@for-all") { return grammar.forLoopType().forAll(); }



// Chains
// ===================================================

Chain
  = "@" "-gss-"? "chain" __ selector:Selector __ chainers:Chainer+ __ { //sw:StrengthAndWeight?
    grammar.chain(selector, chainers);
  }

Chainer
  = headCharacters:[a-zA-Z\-_0-9]+ "(" _
    headExpression:HeadExp? _
    headOperator:ChainEq _
    bridgeValue:BridgeValue? _
    tailOperator:ChainEq? _
    strengthAndWeight:StrengthAndWeight? _ ")"
    tailCharacters:[a-zA-Z\-_0-9]* __ {
      return grammar.chainer({
        headCharacters: headCharacters,
        headExpression: headExpression,
        headOperator: headOperator,
        bridgeValue: bridgeValue,
        tailOperator: tailOperator,
        strengthAndWeight: strengthAndWeight,
        tailCharacters: tailCharacters
      });
    }

HeadExp
  = operator:ChainMath expression:AdditiveExpression {
    return grammar.headExpression(operator, expression);
  }

TailExp
  = expression:AdditiveExpression operator:ChainMath {
    return grammar.tailExpression(expression, operator);
  }

ChainMath
  = "+" { return grammar.chainMathOperator().plus(); }
  / "-" { return grammar.chainMathOperator().minus(); }
  / "*" { return grammar.chainMathOperator().multiply(); }
  / "/" { return grammar.chainMathOperator().divide(); }

ChainEq
  = operator:LinearConstraintOperator? {
    return grammar.chainLinearConstraintOperator(operator);
  }

BridgeValue
  = (AdditiveExpression)
